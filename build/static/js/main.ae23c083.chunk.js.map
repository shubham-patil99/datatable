{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["empList","name","age","rollno","persentage","App","useState","data","setData","className","align","title","columns","field","type","editable","onRowAdd","newRow","Promise","resolve","reject","updatedRows","id","Math","floor","random","setTimeout","onRowDelete","selectedRow","index","tableData","splice","onRowUpdate","updatedRow","oldRow","options","actionsColumnIndex","addRowPosition","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAIMA,EAAU,CACR,CAACC,KAAK,UAAUC,IAAI,GAAGC,OAAO,EAAEC,WAAW,OAC3C,CAACH,KAAK,QAAQC,IAAI,GAAGC,OAAO,EAAEC,WAAW,OACzC,CAACH,KAAK,QAAQC,IAAI,GAAGC,OAAO,EAAEC,WAAW,OACzC,CAACH,KAAK,MAAMC,IAAI,GAAGC,OAAO,EAAEC,WAAW,OACvC,CAACH,KAAK,SAASC,IAAI,GAAGC,OAAO,EAAEC,WAAW,OAC1C,CAACH,KAAK,WAAWC,IAAI,GAAGC,OAAO,EAAEC,WAAW,OAC5C,CAACH,KAAK,MAAMC,IAAI,GAAGC,OAAO,EAAEC,WAAW,OACvC,CAACH,KAAK,QAAQC,IAAI,GAAGC,OAAO,EAAEC,WAAW,OACzC,CAACH,KAAK,SAASC,IAAI,GAAGC,OAAO,EAAEC,WAAW,OAC1C,CAACH,KAAK,SAASC,IAAI,GAAGC,OAAO,GAAGC,WAAW,QAyDpCC,MAtDf,WAAgB,IAAD,EAEWC,mBAASN,GAFpB,mBAENO,EAFM,KAEAC,EAFA,KAWb,OACE,sBAAKC,UAAU,OAAf,UACE,oBAAIC,MAAM,SAAV,wBACE,cAAC,IAAD,CACAC,MAAM,sBACNJ,KAAMA,EACNK,QAdS,CACT,CAACD,MAAM,OAAOE,MAAM,QACpB,CAACF,MAAM,MAAOE,MAAM,OACpB,CAACF,MAAM,UAAWG,KAAK,SAAUD,MAAM,UACvC,CAACF,MAAM,QAASE,MAAM,eAWtBE,SAAU,CACRC,SAAU,SAACC,GAAD,OAAY,IAAIC,SAAQ,SAACC,EAASC,GAC1C,IAAMC,EAAW,sBAAOd,GAAP,cAAee,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,WAAoBR,KACxES,YAAW,WACTlB,EAAQa,GACRF,MACC,SAELQ,YAAa,SAAAC,GAAW,OAAI,IAAIV,SAAQ,SAACC,EAASC,GAChD,IAAMS,EAAQD,EAAYE,UAAUR,GAC9BD,EAAW,YAAOd,GACxBc,EAAYU,OAAOF,EAAO,GAC1BH,YAAW,WACTlB,EAAQa,GACRF,MACC,SAELa,YAAY,SAACC,EAAWC,GAAZ,OAAqB,IAAIhB,SAAQ,SAACC,EAAQC,GACpD,IAAMS,EAAMK,EAAOJ,UAAUR,GACvBD,EAAY,YAAId,GACtBc,EAAYQ,GAAOI,EACnBP,YAAW,WACTlB,EAAQa,GACRF,MACC,UAIPgB,QAAS,CACPC,oBAAqB,EAAGC,eAAgB,eCpDnCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ae23c083.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport MaterialTable from 'material-table'\n\nconst empList = [\n        {name:'Shubham',age:12,rollno:1,persentage:\"60%\"},\n        {name:'Rohan',age:16,rollno:2,persentage:\"50%\"},\n        {name:'Rahul',age:18,rollno:3,persentage:\"80%\"},\n        {name:'Sid',age:17,rollno:4,persentage:\"55%\"},\n        {name:'Prasad',age:15,rollno:5,persentage:\"70%\"},\n        {name:'Prashant',age:11,rollno:6,persentage:\"90%\"},\n        {name:'Sam',age:18,rollno:7,persentage:\"60%\"},\n        {name:'Oshin',age:19,rollno:8,persentage:\"50%\"},\n        {name:'Ankush',age:13,rollno:9,persentage:\"70%\"},\n        {name:'Vishal',age:10,rollno:10,persentage:\"72%\"},\n        ]\n\nfunction App() {\n\n  const [data, setData] = useState(empList)\n  const columns =[\n        {title:\"Name\",field:\"name\"},\n        {title:\"Age\", field:\"age\"},\n        {title:\"Roll-No\", type:'number', field:\"rollno\"},\n        {title:\"Score\", field:\"persentage\"}\n        ] \n\n\n  return (\n    <div className=\"blue\">\n      <h1 align=\"center\">Data-Table</h1>\n        <MaterialTable\n        title=\"Required Data Table\"\n        data={data}\n        columns={columns}\n        editable={{\n          onRowAdd: (newRow) => new Promise((resolve, reject) => {\n            const updatedRows = [...data, { id: Math.floor(Math.random() * 100), ...newRow }]\n            setTimeout(() => {\n              setData(updatedRows)\n              resolve()\n            }, 2000)\n          }),\n          onRowDelete: selectedRow => new Promise((resolve, reject) => {\n            const index = selectedRow.tableData.id;\n            const updatedRows = [...data]\n            updatedRows.splice(index, 1)\n            setTimeout(() => {\n              setData(updatedRows)\n              resolve()\n            }, 2000)\n          }),\n          onRowUpdate:(updatedRow,oldRow)=>new Promise((resolve,reject)=>{\n            const index=oldRow.tableData.id;\n            const updatedRows=[...data]\n            updatedRows[index]=updatedRow\n            setTimeout(() => {\n              setData(updatedRows)\n              resolve()\n            }, 2000)\n          })\n\n        }}\n        options={{\n          actionsColumnIndex: -1, addRowPosition: \"first\"\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}